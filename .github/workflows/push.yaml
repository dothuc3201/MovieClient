name: Deploy

on:
  push:
    branches:
      - main
env:
  image_repository: ${{ secrets.DOCKERHUB_USERNAME }}/${{ secrets.APP_NAME }}

jobs:
  build:
    name: Build and push Docker image
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.tags.outputs.value }}    
    steps:
      - uses: actions/checkout@v3
  
      - name: Login docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Get tags
        id: tags
        run: |
          TAGS=${GITHUB_SHA::8}
          echo $TAGS
          echo "::set-output name=value::$(echo $TAGS)"
        shell: bash

      - name: Check if docker image existed
        id: existed
        run: docker manifest inspect ${{ env.image_repository }}:${{ steps.tags.outputs.value }}
        continue-on-error: true
      
      - name: Set up Docker Buildx
        if: steps.existed.outcome == 'failure'
        uses: docker/setup-buildx-action@v2
      - name: Build and push
        if: steps.existed.outcome == 'failure'
        uses: docker/build-push-action@v3
        with:
          context: ./movie-client
          # file: ./web_fe/Dockerfile
          push: true
          tags: ${{ env.image_repository }}:${{ steps.tags.outputs.value }}
          cache-from: type=registry,ref=${{ env.image_repository }}:${{ secrets.APP_NAME }}-buildcache
          cache-to: type=registry,ref=${{ env.image_repository }}:${{ secrets.APP_NAME }}-buildcache,mode=max
  upload:
    needs: build
    name: Upload build files to MinIO
    runs-on: ubuntu-latest
    steps:
      - name: Login docker
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Copy build files
        run: |
          CONTAINER=$(docker create ${{ env.image_repository }}:${{ needs.build.outputs.tag }})
          docker cp $CONTAINER:/app/dist $(pwd)
      - name: Minio Deploy
        uses: mamal72/minio-perfect-deploy-action@main
        with:
          endpoint: ${{ secrets.MINIO_ENDPOINT }}
          access_key: ${{ secrets.MINIO_ACCESS_KEY }}
          secret_key: ${{ secrets.MINIO_SECRET_KEY }}
          bucket: ${{ secrets.MINIO_BUCKET }}
          # Optional inputs with their defaults:
          source_dir: 'dist'
          target_dir: '/'